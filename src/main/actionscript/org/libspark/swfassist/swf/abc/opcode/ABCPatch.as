/* * Copyright(c) 2009 Dan Riley * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,  * either express or implied. See the License for the specific language * governing permissions and limitations under the License. */package org.libspark.swfassist.swf.abc.opcode{	import flash.utils.ByteArray;		public class ABCPatch	{				private var _location:int = 0;		private var _numBytesRemove:int = 0;		private var _numBytesAdd:int = 0;		private var _patch:ByteArray = null;				/**		 * ABCPatch holds data for the location and number of bytes to remove, and/or		 * the location and number of bytes to add, as well as the actual bytes to		 * be added at the location		 */		public function ABCPatch( loc:int = 0, numBytesRemove:int = 0, patch:ByteArray = null ):void		{			_location = loc;						_numBytesRemove = numBytesRemove;			byteArray = patch;		}				/**		 * The location in a ByteArray of a patch occurrence		 */		public function set location( loc:int ):void		{			_location = loc;		}				public function get location():int		{			return _location;		}				/**		 * Returns the change in the number of bytes caused		 * by the patch		 */		public function get difference():int		{			trace("calc difference " + _numBytesAdd + " - " + _numBytesRemove );			return _numBytesAdd - _numBytesRemove;		}				public function get numBytesRemoved():int		{			return _numBytesRemove;		}				public function get numBytesAdded():int		{			return _numBytesAdd;		}				/**		 * Sets the start position, and the number of bytes to		 * remove based on a start location and an end location		 */		public function remove( s:int, e:int ):void		{			_location = s;						if( e < s )				throw new( "Incorrect patch dimensions." );			else				_numBytesRemove = e - s;		}				public function add( b:ByteArray )		{			byteArray = b;		}				/**		 * The ByteArray to add after deletion at the given location		 */		public function set byteArray( b:ByteArray ):void		{			if( b != null )			{										_patch = b;					_patch.position = 0;					_numBytesAdd = _patch.length;			}		}				public function get byteArray():ByteArray		{			return _patch;		}	}}