/* * Copyright(c) 2009 Dan Riley * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,  * either express or implied. See the License for the specific language * governing permissions and limitations under the License. */package org.libspark.swfassist.swf.abc.validators{	import flash.utils.ByteArray;	import flash.utils.Endian;		import org.libspark.swfassist.swf.abc.consts.ABCConsts;	import org.libspark.swfassist.swf.abc.structures.ABCMultinameInfo;	import org.libspark.swfassist.swf.abc.structures.ABCMultinameQName;	import org.libspark.swfassist.swf.abc.opcode.ABCOpState;	import org.libspark.swfassist.swf.abc.opcode.ABCPatch;		public class ABCSecurityValidator implements IABCValidator	{				/**		 * ABCSecurityValidator		 */		 		public function get historyLength():uint		{			return 1;		}				public function validate( state:ABCOpState, patch:ABCPatch ):Boolean		{			switch( state.opCode() )			{								case ABCConsts.OP_callpropvoid:				case ABCConsts.OP_callproperty:										// Read the multiname info from the pool with the last value coming from					// the last index										var stateVal:Vector.<int> = state.value();										var func:ABCMultinameInfo = state.abcInfo.cpool.getMultiname(stateVal[0]);					var numArgs:int = stateVal[1];										if(func.kind == ABCConsts.CONSTANT_Qname)					{						if( ABCMultinameQName(func.data).qName.localName == "navigateToURL" )						{														// Patch found store number of bytes to delete							// and any ByteArray to add							var ba:ByteArray = new ByteArray();							ba.endian = Endian.LITTLE_ENDIAN;														// Remove the arguments from the scope							while( --numArgs > -1 )								ba.writeByte( ABCConsts.OP_popscope );															// If we need to return something just push null							if( state.opCode() == ABCConsts.OP_callproperty )								ba.writeByte( ABCConsts.OP_pushnull );														patch.remove( state.start(), state.end() );							patch.add( ba );														return true;						}					}												}						return false;					}						}}