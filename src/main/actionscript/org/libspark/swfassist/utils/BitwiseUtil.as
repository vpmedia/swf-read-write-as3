/* * Copyright(c) 2007 the Spark project. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,  * either express or implied. See the License for the specific language * governing permissions and limitations under the License. */package org.libspark.swfassist.utils{	public class BitwiseUtil	{		public static function getMinBits(a:uint, b:uint = 0, c:uint = 0, d:uint = 0):uint		{			var val:uint = a | b | c | d;			var bits:uint = 1;						do {				val >>>= 1;				++bits;			}			while (val != 0)						return bits;		}				public static function getMinSBits(a:int, b:int = 0, c:int = 0, d:int = 0):uint		{			return getMinBits(Math.abs(a), Math.abs(b), Math.abs(c), Math.abs(d));		}				public static function getMinFBits(a:Number, b:Number = 0, c:Number = 0, d:Number = 0):uint		{			return getMinSBits(a * 65536, b * 65536, c * 65536, d * 65536);		}				// converts an int number to a readable binary string		public static function toBinary( r:uint ):String		{						var str:String = "";			var bits:uint = 32;	// assume the unit is 32 bits			var first:int = -1;			var bytes:int = 1;						// shift the bit until you find a non-sign one in the data			while ( --bits > 0 ) {								if( r & 1 << (bits-1) ) {										if( first == -1 ) {						first = 0;						bytes = Math.floor((bits-1)/8) + 1;					}											str += "1";									} else					str += "0";			}						// Cut to an intervals of 8 bits			str = str.substr( 31 - 8*bytes );			return "0b"+str;		}				// Converts a binary string (011101101) to it's number		public static function toInt( b:String ):int		{			var pos:int = 0;			var idx:int = b.length;			var total:int = 0;						while( --idx >= 0 ) {				if( b.charAt(idx) == "1" )					total += Math.pow(2, pos );								pos++;			}						return total;		}	}}