/* * The Spark Project ( http://libspark.org ) * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,  * either express or implied. See the License for the specific language * governing permissions and limitations under the License. * * The Original Code is [Open Source Virtual Machine.]. * * The Initial Developer of the Original Code is Adobe System Incorporated. * Portions created by the Initial Developer are Copyright (C) 2004-2006 * the Initial Developer. All Rights Reserved. * * Contributor(s): * * Adobe AS3 Team * Mateusz Malczak ( http://segfaultlabs.com ) * Daniel Riley	 ( http://scientificsciences.com ) */package org.libspark.swfassist.swf.abc.consts{	/**	 * All constats used by parser and code dumping funcitons.	 *  	 * @author malczak	 * 	 */	final public class ABCConsts 	{		// method flags		static public const NEED_ARGUMENTS				:int = 0x01;		static public const NEED_ACTIVATION				:int = 0x02;		static public const NEED_REST					:int = 0x04;		static public const HAS_OPTIONAL				:int = 0x08;		static public const IGNORE_REST					:int = 0x10;		static public const NATIVE						:int = 0x20;		static public const HAS_ParamNames				:int = 0x80;				static public const CONSTANT_Utf8				:int = 0x01;		static public const CONSTANT_Int				:int = 0x03;		static public const CONSTANT_UInt				:int = 0x04;		static public const CONSTANT_PrivateNs			:int = 0x05; // non-shared namespace		static public const CONSTANT_Double				:int = 0x06;		static public const CONSTANT_Qname				:int = 0x07; // o.ns::name, ct ns, ct name		static public const CONSTANT_Namespace			:int = 0x08; // use namespace		static public const CONSTANT_Multiname			:int = 0x09; // o.name, ct nsset, ct name		// not used 		static public const CONSTANT_False				:int = 0x0A;		static public const CONSTANT_True				:int = 0x0B;				static public const CONSTANT_Null				:int = 0x0C;		static public const CONSTANT_QnameA				:int = 0x0D; // o.@ns::name, ct ns, ct attr-name		static public const CONSTANT_MultinameA			:int = 0x0E; // o.@name, ct attr-name		static public const CONSTANT_RTQname			:int = 0x0F; // o.ns::name, rt ns, ct name		static public const CONSTANT_RTQnameA			:int = 0x10; // o.@ns::name, rt ns, ct attr-name		static public const CONSTANT_RTQnameL			:int = 0x11; // o.ns::[name], rt ns, rt name		static public const CONSTANT_RTQnameLA			:int = 0x12; // o.@ns::[name], rt ns, rt attr-name		static public const CONSTANT_NameL				:int = 0x13;	// o.[], ns=public implied, rt name		static public const CONSTANT_NameLA				:int = 0x14; // o.@[], ns=public implied, rt attr-name		static public const CONSTANT_TypeName 		    :int = 0x1D; 						static public const CONSTANT_NamespaceSet		:int = 0x15;		static public const CONSTANT_PackageNs			:int = 0x16;		static public const CONSTANT_PackageInternalNs	:int = 0x17;		static public const CONSTANT_ProtectedNs		:int = 0x18;		static public const CONSTANT_ExplicitNamespace	:int = 0x19; // ExpicitNamespace, use namespace		static public const CONSTANT_StaticProtectedNs	:int = 0x1a; // StaticProtectedNamespace		static public const CONSTANT_MultinameL         :int = 0x1B;		static public const CONSTANT_MultinameLA        :int = 0x1C;				static public const constantKinds:Array = [ "0", "utf8", "2",			"int", "uint", "private", "double", "qname", "namespace",			"ABCMultiname", "false", "true", "null", "@qname", "@ABCMultiname", "rtqname",			"@rtqname", "[qname]", "@[qname]", "[name]", "@[name]", "nsset"		]				static public const TRAIT_Slot		:int = 0x00;		static public const TRAIT_Method	:int = 0x01;		static public const TRAIT_Getter	:int = 0x02;		static public const TRAIT_Setter	:int = 0x03;		static public const TRAIT_Class		:int = 0x04;		static public const TRAIT_Function	:int = 0x05;		static public const TRAIT_Const		:int = 0x06;				static public const traitKinds:Array = [			"var", 			"function", 			"function get", 			"function set", 			"class", 			"function", 			"const"		]				static public var totalSize:int;		static public var opSizes:Array = new Array(256);		static public const ATTR_final			  :int = 0x01; // 1=final, 0=virtual (for methods)		static public const ATTR_override         :int = 0x02; // 1=override, 0=new		static public const ATTR_metadata         :int = 0x04; // 1=has ABCMetaData, 0=no ABCMetaData		static public const ATTR_public           :int = 0x08; // 1=add public namespace				static public const CLASS_FLAG_sealed		:int = 0x01;		static public const CLASS_FLAG_final		:int = 0x02;		static public const CLASS_FLAG_interface	:int = 0x04;						//Op Names for AVM2		static public const OP_bkpt			:int = 0x01;		static public const OP_nop			:int = 0x02;		static public const OP_throw		:int = 0x03;		static public const OP_getsuper		:int = 0x04;		static public const OP_setsuper		:int = 0x05;		static public const OP_dxns			:int = 0x06;		static public const OP_dxnslate		:int = 0x07;		static public const OP_kill			:int = 0x08;		static public const OP_label		:int = 0x09;		static public const OP_ifnlt		:int = 0x0C;		static public const OP_ifnle		:int = 0x0D;		static public const OP_ifngt		:int = 0x0E;		static public const OP_ifnge		:int = 0x0F;		static public const OP_jump			:int = 0x10;		static public const OP_iftrue		:int = 0x11;		static public const OP_iffalse		:int = 0x12;		static public const OP_ifeq			:int = 0x13;		static public const OP_ifne			:int = 0x14;		static public const OP_iflt			:int = 0x15;		static public const OP_ifle			:int = 0x16;		static public const OP_ifgt			:int = 0x17;		static public const OP_ifge			:int = 0x18;		static public const OP_ifstricteq	:int = 0x19;		static public const OP_ifstrictne	:int = 0x1A;		static public const OP_lookupswitch	:int = 0x1B;		static public const OP_pushwith		:int = 0x1C;		static public const OP_popscope		:int = 0x1D;		static public const OP_nextname		:int = 0x1E;		static public const OP_hasnext		:int = 0x1F;		static public const OP_pushnull		:int = 0x20;		static public const OP_pushundefined:int = 0x21;		static public const OP_pushconstant	:int = 0x22;		static public const OP_nextvalue	:int = 0x23;		static public const OP_pushbyte		:int = 0x24;		static public const OP_pushshort	:int = 0x25;		static public const OP_pushtrue		:int = 0x26;		static public const OP_pushfalse	:int = 0x27;		static public const OP_pushnan		:int = 0x28;		static public const OP_pop			:int = 0x29;		static public const OP_dup			:int = 0x2A;		static public const OP_swap			:int = 0x2B;		static public const OP_pushstring	:int = 0x2C;		static public const OP_pushint		:int = 0x2D;		static public const OP_pushuint		:int = 0x2E;		static public const OP_pushdouble	:int = 0x2F;		static public const OP_pushscope	:int = 0x30;		static public const OP_pushnamespace:int = 0x31;		static public const OP_hasnext2		:int = 0x32;		static public const OP_newfunction	:int = 0x40;		static public const OP_call			:int = 0x41;		static public const OP_construct	:int = 0x42;		static public const OP_callmethod	:int = 0x43;		static public const OP_callstatic	:int = 0x44;		static public const OP_callsuper	:int = 0x45;		static public const OP_callproperty	:int = 0x46;		static public const OP_returnvoid	:int = 0x47;		static public const OP_returnvalue	:int = 0x48;		static public const OP_constructsuper:int = 0x49;		static public const OP_constructprop:int = 0x4A;		static public const OP_callsuperid	:int = 0x4B;		static public const OP_callproplex	:int = 0x4C;		static public const OP_callinterface:int = 0x4D;		static public const OP_callsupervoid:int = 0x4E;		static public const OP_callpropvoid	:int = 0x4F;		static public const OP_newobject	:int = 0x55;		static public const OP_newarray		:int = 0x56;		static public const OP_newactivation:int = 0x57;		static public const OP_newclass		:int = 0x58;		static public const OP_getdescendants:int = 0x59;		static public const OP_newcatch		:int = 0x5A;		static public const OP_findpropstrict:int = 0x5D;		static public const OP_findproperty	:int = 0x5E;		static public const OP_finddef		:int = 0x5F;		static public const OP_getlex		:int = 0x60;		static public const OP_setproperty	:int = 0x61;		static public const OP_getlocal		:int = 0x62;		static public const OP_setlocal		:int = 0x63;		static public const OP_getglobalscope:int = 0x64;		static public const OP_getscopeobject:int = 0x65;		static public const OP_getproperty	:int = 0x66;		static public const OP_getouterscope:int = 0x67;		static public const OP_initproperty	:int = 0x68;		static public const OP_setpropertylate:int = 0x69;		static public const OP_deleteproperty:int = 0x6A;		static public const OP_deletepropertylate:int = 0x6B;		static public const OP_getslot		:int = 0x6C;		static public const OP_setslot		:int = 0x6D;		static public const OP_getglobalslot:int = 0x6E;		static public const OP_setglobalslot:int = 0x6F;		static public const OP_convert_s	:int = 0x70;		static public const OP_esc_xelem	:int = 0x71;		static public const OP_esc_xattr	:int = 0x72;		static public const OP_convert_i	:int = 0x73;		static public const OP_convert_u	:int = 0x74;		static public const OP_convert_d	:int = 0x75;		static public const OP_convert_b	:int = 0x76;		static public const OP_convert_o	:int = 0x77;		static public const OP_coerce		:int = 0x80;		static public const OP_coerce_b		:int = 0x81;		static public const OP_coerce_a		:int = 0x82;		static public const OP_coerce_i		:int = 0x83;		static public const OP_coerce_d		:int = 0x84;		static public const OP_coerce_s		:int = 0x85;		static public const OP_astype		:int = 0x86;		static public const OP_astypelate	:int = 0x87;		static public const OP_coerce_u		:int = 0x88;		static public const OP_coerce_o		:int = 0x89;		static public const OP_negate		:int = 0x90;		static public const OP_increment	:int = 0x91;		static public const OP_inclocal		:int = 0x92;		static public const OP_decrement	:int = 0x93;		static public const OP_declocal		:int = 0x94;		static public const OP_typeof		:int = 0x95;		static public const OP_not			:int = 0x96;		static public const OP_bitnot		:int = 0x97;		static public const OP_concat		:int = 0x9A;		static public const OP_add_d		:int = 0x9B;		static public const OP_add			:int = 0xA0;		static public const OP_subtract		:int = 0xA1;		static public const OP_multiply		:int = 0xA2;		static public const OP_divide		:int = 0xA3;		static public const OP_modulo		:int = 0xA4;		static public const OP_lshift		:int = 0xA5;		static public const OP_rshift		:int = 0xA6;		static public const OP_urshift		:int = 0xA7;		static public const OP_bitand		:int = 0xA8;		static public const OP_bitor		:int = 0xA9;		static public const OP_bitxor		:int = 0xAA;		static public const OP_equals		:int = 0xAB;		static public const OP_strictequals	:int = 0xAC;		static public const OP_lessthan		:int = 0xAD;		static public const OP_lessequals	:int = 0xAE;		static public const OP_greaterthan	:int = 0xAF;		static public const OP_greaterequals:int = 0xB0;		static public const OP_instanceof	:int = 0xB1;		static public const OP_istype		:int = 0xB2;		static public const OP_istypelate	:int = 0xB3;		static public const OP_in			:int = 0xB4;		static public const OP_increment_i	:int = 0xC0;		static public const OP_decrement_i	:int = 0xC1;		static public const OP_inclocal_i	:int = 0xC2;		static public const OP_declocal_i	:int = 0xC3;		static public const OP_negate_i		:int = 0xC4;		static public const OP_add_i		:int = 0xC5;		static public const OP_subtract_i	:int = 0xC6;		static public const OP_multiply_i	:int = 0xC7;		static public const OP_getlocal0	:int = 0xD0;		static public const OP_getlocal1	:int = 0xD1;		static public const OP_getlocal2	:int = 0xD2;		static public const OP_getlocal3	:int = 0xD3;		static public const OP_setlocal0	:int = 0xD4;		static public const OP_setlocal1	:int = 0xD5;		static public const OP_setlocal2	:int = 0xD6;		static public const OP_setlocal3	:int = 0xD7;		static public const OP_debug		:int = 0xEF;		static public const OP_debugline	:int = 0xF0;		static public const OP_debugfile	:int = 0xF1;		static public const OP_bkptline		:int = 0xF2;				/**		 * Names of all opcodes that can be used inside a doABC bytecode block 		 */		static public const opNames:Array = [				"OP_0x00       ",				"bkpt          ",				"nop           ",				"throw         ",				"getsuper      ",				"setsuper      ",				"dxns          ",				"dxnslate      ",				"kill          ",				"label         ",				"OP_0x0A       ",				"OP_0x0B       ",				"ifnlt         ",				"ifnle         ",				"ifngt         ",				"ifnge         ",				"jump          ",				"iftrue        ",				"iffalse       ",				"ifeq          ",				"ifne          ",				"iflt          ",				"ifle          ",				"ifgt          ",				"ifge          ",				"ifstricteq    ",				"ifstrictne    ",				"lookupswitch  ",				"pushwith      ",				"popscope      ",				"nextname      ",				"hasnext       ",				"pushnull      ",				"pushundefined ",				"pushconstant  ",				"nextvalue     ",				"pushbyte      ",				"pushshort     ",				"pushtrue      ",				"pushfalse     ",				"pushnan       ",				"pop           ",				"dup           ",				"swap          ",				"pushstring    ",				"pushint       ",				"pushuint      ",				"pushdouble    ",				"pushscope     ",				"pushnamespace ",				"hasnext2      ",				"OP_0x33       ",				"OP_0x34       ",				"OP_0x35       ",				"OP_0x36       ",				"OP_0x37       ",				"OP_0x38       ",				"OP_0x39       ",				"OP_0x3A       ",				"OP_0x3B       ",				"OP_0x3C       ",				"OP_0x3D       ",				"OP_0x3E       ",				"OP_0x3F       ",				"newfunction   ",				"call          ",				"construct     ",				"callmethod    ",				"callstatic    ",				"callsuper     ",				"callproperty  ",				"returnvoid    ",				"returnvalue   ",				"constructsuper",				"constructprop ",				"callsuperid   ",				"callproplex   ",				"callinterface ",				"callsupervoid ",				"callpropvoid  ",				"OP_0x50       ",				"OP_0x51       ",				"OP_0x52       ",				"OP_0x53       ",				"OP_0x54       ",				"newobject     ",				"newarray      ",				"newactivation ",				"newclass      ",				"getdescendants",				"newcatch      ",				"OP_0x5B       ",				"OP_0x5C       ",				"findpropstrict",				"findproperty  ",				"finddef       ",				"getlex        ",				"setproperty   ",				"getlocal      ",				"setlocal      ",				"getglobalscope",				"getscopeobject",				"getproperty   ",				"getouterscope ",				"initproperty  ",				"OP_0x69       ",				"deleteproperty",				"OP_0x6A       ",				"getslot       ",				"setslot       ",				"getglobalslot ",				"setglobalslot ",				"convert_s     ",				"esc_xelem     ",				"esc_xattr     ",				"convert_i     ",				"convert_u     ",				"convert_d     ",				"convert_b     ",				"convert_o     ",				"checkfilter   ",				"OP_0x79       ",				"OP_0x7A       ",				"OP_0x7B       ",				"OP_0x7C       ",				"OP_0x7D       ",				"OP_0x7E       ",				"OP_0x7F       ",				"coerce        ",				"coerce_b      ",				"coerce_a      ",				"coerce_i      ",				"coerce_d      ",				"coerce_s      ",				"astype        ",				"astypelate    ",				"coerce_u      ",				"coerce_o      ",				"OP_0x8A       ",				"OP_0x8B       ",				"OP_0x8C       ",				"OP_0x8D       ",				"OP_0x8E       ",				"OP_0x8F       ",				"negate        ",				"increment     ",				"inclocal      ",				"decrement     ",				"declocal      ",				"typeof        ",				"not           ",				"bitnot        ",				"OP_0x98       ",				"OP_0x99       ",				"concat        ",				"add_d         ",				"OP_0x9C       ",				"OP_0x9D       ",				"OP_0x9E       ",				"OP_0x9F       ",				"add           ",				"subtract      ",				"multiply      ",				"divide        ",				"modulo        ",				"lshift        ",				"rshift        ",				"urshift       ",				"bitand        ",				"bitor         ",				"bitxor        ",				"equals        ",				"strictequals  ",				"lessthan      ",				"lessequals    ",				"greaterthan   ",				"greaterequals ",				"instanceof    ",				"istype        ",				"istypelate    ",				"in            ",				"OP_0xB5       ",				"OP_0xB6       ",				"OP_0xB7       ",				"OP_0xB8       ",				"OP_0xB9       ",				"OP_0xBA       ",				"OP_0xBB       ",				"OP_0xBC       ",				"OP_0xBD       ",				"OP_0xBE       ",				"OP_0xBF       ",				"increment_i   ",				"decrement_i   ",				"inclocal_i    ",				"declocal_i    ",				"negate_i      ",				"add_i         ",				"subtract_i    ",				"multiply_i    ",				"OP_0xC8       ",				"OP_0xC9       ",				"OP_0xCA       ",				"OP_0xCB       ",				"OP_0xCC       ",				"OP_0xCD       ",				"OP_0xCE       ",				"OP_0xCF       ",				"getlocal0     ",				"getlocal1     ",				"getlocal2     ",				"getlocal3     ",				"setlocal0     ",				"setlocal1     ",				"setlocal2     ",				"setlocal3     ",				"OP_0xD8       ",				"OP_0xD9       ",				"OP_0xDA       ",				"OP_0xDB       ",				"OP_0xDC       ",				"OP_0xDD       ",				"OP_0xDE       ",				"OP_0xDF       ",				"OP_0xE0       ",				"OP_0xE1       ",				"OP_0xE2       ",				"OP_0xE3       ",				"OP_0xE4       ",				"OP_0xE5       ",				"OP_0xE6       ",				"OP_0xE7       ",				"OP_0xE8       ",				"OP_0xE9       ",				"OP_0xEA       ",				"OP_0xEB       ",				"OP_0xEC       ",				"OP_0xED       ",				"OP_0xEE       ",				"debug         ",				"debugline     ",				"debugfile     ",				"bkptline      ",				"timestamp     ",				"OP_0xF4       ",				"verifypass    ",				"alloc         ",				"mark          ",				"wb            ",				"prologue      ",				"sendenter     ",				"doubletoatom  ",				"sweep         ",				"codegenop     ",				"verifyop      ",				"decode        "			];			}}