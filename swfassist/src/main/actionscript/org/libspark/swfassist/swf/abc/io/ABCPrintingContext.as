/* * The Spark Project ( http://libspark.org ) * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,  * either express or implied. See the License for the specific language * governing permissions and limitations under the License. * * Contributor(s): * Daniel Riley	 ( http://scientificsciences.com ) */package org.libspark.swfassist.swf.abc.io{	import org.libspark.swfassist.errors.ErrorHandler;	import org.libspark.swfassist.errors.DefaultErrorHandler;		/**	 * Contains variables that complement the ABCReader class, mainly for keeping track	 * of the read so it can be executed in a thread-based style.	 *  	 * @author danriley	 * @version 0.1	 */		public class ABCPrintingContext extends ABCContext	{		// Vars for printing selective data from an ABCInfo		public var readHeader		:Boolean = true;		public var readCPool		:Boolean = true;		public var readNumbers		:Boolean = true;		public var readStrings		:Boolean = false;		public var readNamespaces	:Boolean = false;				public var readMetaData		:Boolean = true;				public var readScripts		:Boolean = true;		public var readScriptCode	:Boolean = false;				public var readMethods		:Boolean = true;		public var readMethodCode	:Boolean = false;			public var readInstances	:Boolean = true;		public var readInstanceCode	:Boolean = false;				public var readClasses		:Boolean = true;		public var readClassCode	:Boolean = false;						// Cursor		public var methodLimit	:uint = 0;		public var methodCount	:int = -1;		public var methodCursor	:int = 0;				/**		 * This method is called after a section of the ABC file has been read.		 * it decides if the reader should move on to the next section or if it		 * should continue in the current section, based on the context.		 */		 		public override function updateCursor()		{			var nextStep:Boolean = true;						switch( cursor )			{				case CURSOR_METHODS:					if( readMethods )					{						if( methodCursor != methodCount )							nextStep = false;					}					break;			}						if( nextStep )				cursor++;		}	}}