/* * Copyright(c) 2009 Dan Riley * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,  * either express or implied. See the License for the specific language * governing permissions and limitations under the License. */package org.libspark.swfassist.swf.abc.opcode{	import flash.utils.ByteArray;	import org.libspark.swfassist.swf.abc.consts.ABCConsts;	import org.libspark.swfassist.io.ByteArrayInputStream;		public class ABCOpReader	{				/**		 * ABCInfoPatcherState, holds the current data for reading		 * through a method by opCode		 */		public function ABCOpReader( abc:ByteArray = null ):void		{			reader = new ByteArrayInputStream( abc );			reader.position = 0;		}				public var start:uint = 0;		public var reader:ByteArrayInputStream;		public var opCode:int = 0;	// The last read opCode		public var value:Vector.<int>;				public function set byteArray( abc:ByteArray ):void		{			reader.byteArray = abc;		}				public function clear():void		{			reader.byteArray = null;			start = 0;			opCode = 0;			value = null;		}				/**		 * Reads the next available opCode		 */		public function read():void		{			// Record the start position, the opCode read, and the			// value associated with the opCode			start = reader.position;			opCode = reader.readU8();			readOpCode();		}				public function get position():int		{			return reader.position;		}				public function get length():uint		{			return reader.length;		}				public function get bytesAvailable():Boolean		{			return reader.bytesAvailable;		}				public function get opCodeName():String		{			return ABCConsts.opNames[opCode];		}				/**		 * Evaluates the current opCode if it is a control transfer tag:		 * iflt, ifle, ifnlt, ifnle, ifgt, ifge, ifngt, ifnge, ifeq,		 * ifne, ifstricteq, ifstrictne, iftrue, and iffalse, lookupswitch		 */		public function get controlTransfer():Boolean		{			switch( opCode )			{				case ABCConsts.OP_lookupswitch:				case ABCConsts.OP_jump:				case ABCConsts.OP_iftrue:		case ABCConsts.OP_iffalse:				case ABCConsts.OP_ifeq:			case ABCConsts.OP_ifne:				case ABCConsts.OP_ifge:			case ABCConsts.OP_ifnge:				case ABCConsts.OP_ifgt:			case ABCConsts.OP_ifngt:				case ABCConsts.OP_ifle:			case ABCConsts.OP_ifnle:				case ABCConsts.OP_iflt:			case ABCConsts.OP_ifnlt:				case ABCConsts.OP_ifstricteq:	case ABCConsts.OP_ifstrictne:					return true;			}						return false;		}				/**		 * Reads an opCode, and returns the data associated		 * as a vector of integers (length usually between 1 and 3, but 		 */		private function readOpCode():void		{			value = new Vector.<int>();						var i:int = 0;			switch(opCode) 			{				// ReadS8				case ABCConsts.OP_pushbyte:				case ABCConsts.OP_getscopeobject:					value[0] = reader.readS8();					return;									// ReadS24				case ABCConsts.OP_jump:				case ABCConsts.OP_iftrue:		case ABCConsts.OP_iffalse:				case ABCConsts.OP_ifeq:			case ABCConsts.OP_ifne:				case ABCConsts.OP_ifge:			case ABCConsts.OP_ifnge:				case ABCConsts.OP_ifgt:			case ABCConsts.OP_ifngt:				case ABCConsts.OP_ifle:			case ABCConsts.OP_ifnle:				case ABCConsts.OP_iflt:			case ABCConsts.OP_ifnlt:				case ABCConsts.OP_ifstricteq:	case ABCConsts.OP_ifstrictne:					value[0] = reader.readS24();					return;									// ReadEU32				case ABCConsts.OP_newobject:				case ABCConsts.OP_newarray:				case ABCConsts.OP_call:				case ABCConsts.OP_construct:				case ABCConsts.OP_constructsuper:				case ABCConsts.OP_inclocal:				case ABCConsts.OP_declocal:				case ABCConsts.OP_inclocal_i:				case ABCConsts.OP_declocal_i:				case ABCConsts.OP_getlocal:				case ABCConsts.OP_kill:				case ABCConsts.OP_setlocal:				case ABCConsts.OP_debugline:				case ABCConsts.OP_getglobalslot:				case ABCConsts.OP_getslot:				case ABCConsts.OP_setglobalslot:				case ABCConsts.OP_setslot:				case ABCConsts.OP_pushshort:				case ABCConsts.OP_newcatch:				case ABCConsts.OP_newfunction:				case ABCConsts.OP_newclass: 				case ABCConsts.OP_debugfile:				case ABCConsts.OP_pushstring:				case ABCConsts.OP_pushnamespace:				case ABCConsts.OP_pushint:				case ABCConsts.OP_pushuint:				case ABCConsts.OP_pushdouble:				case ABCConsts.OP_getsuper: 				case ABCConsts.OP_setsuper: 				case ABCConsts.OP_getproperty: 				case ABCConsts.OP_initproperty: 				case ABCConsts.OP_setproperty: 				case ABCConsts.OP_getlex: 				case ABCConsts.OP_findpropstrict: 				case ABCConsts.OP_findproperty:				case ABCConsts.OP_finddef:				case ABCConsts.OP_deleteproperty: 				case ABCConsts.OP_istype: 				case ABCConsts.OP_coerce: 				case ABCConsts.OP_astype: 				case ABCConsts.OP_getdescendants:					value[0] = reader.readEncodedU32();					return;									// Read2EU32s				case ABCConsts.OP_constructprop:				case ABCConsts.OP_callproperty:				case ABCConsts.OP_callproplex:				case ABCConsts.OP_callsuper:				case ABCConsts.OP_callsupervoid:				case ABCConsts.OP_callpropvoid:				case ABCConsts.OP_callstatic:				case ABCConsts.OP_hasnext2:					value[0] = reader.readEncodedU32();					value[1] = reader.readEncodedU32();					return;									// Special				case ABCConsts.OP_debug:					value[0] = reader.readU8(); //debug type					value[1] = reader.readEncodedU32(); //index					value[2] = reader.readU8(); //reg					value[3] = reader.readEncodedU32(); //extra					return;									// Special				case ABCConsts.OP_lookupswitch:					value[0] = reader.readS24(); //default offset					var maxindex:int = reader.readEncodedU32(); //number of cases					value[1] = maxindex;										i = -1;					while( ++i <= maxindex )						value[2+i] = reader.readS24(); // case offsets					return;				default:					return;			}								}						}}