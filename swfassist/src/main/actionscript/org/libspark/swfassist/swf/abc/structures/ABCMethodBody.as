/* * The Spark Project ( http://libspark.org ) * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,  * either express or implied. See the License for the specific language * governing permissions and limitations under the License. * * The Original Code is [Open Source Virtual Machine.]. * * The Initial Developer of the Original Code is Adobe System Incorporated. * Portions created by the Initial Developer are Copyright (C) 2004-2006 * the Initial Developer. All Rights Reserved. * * Contributor(s): * * Adobe AS3 Team * Mateusz Malczak ( http://segfaultlabs.com ) * Daniel Riley	 ( http://scientificsciences.com ) */package org.libspark.swfassist.swf.abc.structures{	import flash.utils.ByteArray;		/**	 * ABCMethodBody class is used to store code of a parsed Action Script 3 methods and functions. 	 * Compiled source code is stored in 'code' ByteArray. This property is valid only if 	 * 'readMethodBytes' property of used ABCParser was set to 'true'.	 * If there were any try...except blocks used in code, thay are stored in 'exceptions' array. 	 * But again, this property is valid only when 'readExceptions' property of a parser was set to true.	 * 	 * Both code and exceptions if not readed in parsing stage, can be read later on (currently not implemented). 	 * 	 * This object can be accessed only throught a related ABCMethodInfo object.	 *  	 * @author malczak	 * @version 0.1	 */	final public class ABCMethodBody extends ABCTraits 	{		/* (omitted) method */				public var maxStack	  :uint;		public var localCount	  :uint;		public var initScope	  :uint;		public var maxScope	  :uint;		private var _code			  :ByteArray;		private var _exceptions	  :Vector.<ABCExceptionInfo>;				public function get code():ByteArray		{			return _code;		}				public function set code( value:ByteArray )		{			_code = value;					}				public function get codeLength():uint		{			return _code != null ? _code.length : 0;		}				public function get exceptions():Vector.<ABCExceptionInfo>		{			if( _exceptions == null )				_exceptions = new Vector.<ABCExceptionInfo>();							return _exceptions;		}				public function set exceptions( value:Vector.<ABCExceptionInfo> )		{			_exceptions = value;		}				public override function set init( value:ABCMethodInfo ):void 		{ 			_init = value; 		}	}	}